● 集合类以及集合框架；HashMap与HashTable实现原理，线程安全性，hash冲突及处理算法；ConcurrentHashMap；
    jdk1.8的桶索引位置通过对key的hashcode计算得到,算法有所变动。
    1.8中优化了高位运算的算法，首先通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h >>> 16),
    这么做可以在数组table的length比较小的时候，也能保证考虑到高低Bit都参与到Hash的计算中，同时不会有太大的开销。
    然后通过计算h & (table.length -1)来得到该对象的保存位,而HashMap底层数组的长度总是2的n次方，这是HashMap在速度上的优化。
    当length总是2的n次方时，h& (length-1)运算等价于对length取模，也就是h%length，但是&比%具有更高的效率。

    jdk1.8中ConcurrentHashMap取消了原先分段锁的概念，转而对map中的每一条entry加锁，进一步提高了效率。
    步骤：若tab为空,初始化,
         若不为空查看tab[i]是否为空,为空则新建node,
         若不为空且状态为moved，则正在进行transfer,此线程会加入多线程transfer,每次处理完一个节点就将之设置为forward,
         若看到有节点为forward则直接跳过,直至返回扩容完成后的table,
         之后对首节点加锁,查找链表或红黑树,将节点更新或插入进tab,检查节点数,若大于8则将链表结构转换为红黑树结构,最后检查计数决定是否扩容。

● 进程和线程的区别；
    线程只能共享它所属进程的资源。
    进程拥有一个完整的虚拟地址空间，不依赖于线程而独立存在；
    线程的划分尺度小于进程，使得多线程程序的并发性高。
    反之，线程是进程的一部分，没有自己的地址空间，与进程内的其他线程一起共享分配给该进程的所有资源。

● Java的并发、多线程、 线程模型；

● 什么是线程池，如何使用?
    线程池就是事先将多个线程对象放到一个容器中，当使用的时候就不用new 线程而是直接去池中拿线程即可,
    java中共有
        CachedThreadPool(不限制线程数，有超时时间),
        FixedThreadPool(固定大小,不能随时建立线程,若要新建则会排入队列中等待线程池中的其他线程终止,无超时时间),
        ScheduledThreadPool(创建一个至少有n个线程空间大小的线程池,支持定时以及周期性执行任务——延迟和周期),
        SingleThreadExecutor(连续运行单例线程,所有任务FIFO,若出现异常将会有一个新的线程替代，无超时)
    通过使用    ExecutorService threadPool = Executors.newXXThreadPool()创建(ScheduledThreadPool使用ScheduledExecutorService)
    在使用时,调用threadPool的execute/submit方法传入runnable、callable接口创建任务,两者的区别在于:
        1.submit有返回值，而execute没有
        2.submit方便Exception处理(通过使用Future.get)
    结束后需要调用threadPool.shutdown()或shutdownNow()
    shutdown() 方法在终止前允许执行以前提交的任务，而 shutdownNow()方法阻止等待任务启动并试图停止当前正在执行的任务。

● 数据一致性如何保证;
    Synchronized关键字，类锁，方法锁，重入锁；
    synchronized
    在修饰代码块的时候需要一个reference对象作为锁的对象.
    在修饰方法的时候默认是当前对象作为锁的对象.
    在修饰类时候默认是当前类的Class对象作为锁的对象.

    类锁(synchronized修饰静态的方法或代码块):
        一个class不论被实例化多少次，其中的静态方法和静态变量在内存中都只有一份。
        所以，一旦一个静态的方法被申明为synchronized。此类所有的实例化对象在调用此方法，共用同一把锁，我们称之为类锁。

        类锁只是一个概念上的东西，并不是真实存在的，它只是用来帮助我们理解锁定实例方法和静态方法的区别的。　
        java类可能会有很多个对象，但是只有1个Class对象，也就是说类的不同实例之间共享该类的Class对象。
        Class对象其实也仅仅是1个java对象，只不过有点特殊而已。由于每个java对象都有1个互斥锁，而类的静态方法是需要Class对象。
        所以所谓的类锁，不过是Class对象的锁而已。获取类的Class对象有好几种，最简单的就是［类名.class］的方式。

        ex1:
        public class Test
        {
        　　 // 类锁：形式1
            public static synchronized void Method1()
            {
                System.out.println(＂我是类锁一号＂);
                try
                {
                    Thread.sleep(500);
                }catch (InterruptedException e){
                    e.printStackTrace();
                }
            }
        }

        ex2:
        // 类锁：形式2
        public void Method２()
        {
            synchronized (Test.class)
            {
                System.out.println(＂我是类锁二号＂);
                try
                {
                    Thread.sleep(500);
                } catch (InterruptedException e)
                {
                    e.printStackTrace();
                }

            }
        }


    方法锁(synchronized修饰非静态方法或代码块):
        当一个对象中有synchronized method或synchronized block的时候调用此对象的同步方法或进入其同步区域时，就必须先获得对象锁。
        如果此对象的对象锁已被其他调用者占用，则需要等待此锁被释放。java的所有对象都含有1个互斥锁，这个锁由JVM自动获取和释放。
        线程进入synchronized方法的时候获取该对象的锁，当然如果已经有线程获取了这个对象的锁，那么当前线程会等待；
        synchronized方法正常返回或者抛异常而终止，JVM会自动释放对象锁。

        ex1:
        public class Test
        {
        // 对象锁：形式1(方法锁)
        public synchronized void Method1()
        {
            System.out.println(“我是对象锁也是方法锁”);
            try
            {
                Thread.sleep(500);
            } catch (InterruptedException e){
                e.printStackTrace();
            }
        }

        ex2:
        public void Method2()
        {
            synchronized (this)
            {
                System.out.println("我是对象锁");
                try
                {
                    Thread.sleep(500);
                } catch (InterruptedException e){
                    e.printStackTrace();
                }
            }
        }

    重入锁:
        在JAVA环境下 ReentrantLock 和synchronized 都是 可重入锁
        可重入锁记录每个线程对于对象方法请求的次数，若同一线程多次请求进入同一个锁,则计数减一,不会阻塞。
        可重入锁最大的作用是避免死锁


    自旋锁:
        自旋锁是采用让当前线程不停地的在循环体内执行实现的，当循环的条件被其他线程改变时 才能进入临界区。

        ex1:
        public class SpinLock {

          private AtomicReference<Thread> sign =new AtomicReference<>();

          public void lock(){
            Thread current = Thread.currentThread();
            while(!sign .compareAndSet(null, current)){
            }
          }

          public void unlock (){
            Thread current = Thread.currentThread();
            sign .compareAndSet(current, null);
          }
        }

        使用了CAS原子操作，lock函数将owner设置为当前线程，并且预测原来的值为空。unlock函数将owner设置为null，并且预测值为当前线程。
        由于自旋锁只是将当前线程不停地执行循环体，不进行线程状态的改变，所以响应速度更快。
        但当线程数不停增加时，性能下降明显，因为每个线程都需要执行，占用CPU时间。如果线程竞争不激烈，并且保持锁的时间段。适合使用自旋锁。

        在自旋锁中 另有三种常见的锁形式:TicketLock ，CLHlock 和MCSlock
        Ticket锁主要解决的是访问顺序的问题，主要的问题是在多核cpu上

        ex1:
        public class TicketLock {
            private AtomicInteger                     serviceNum = new AtomicInteger();
            private AtomicInteger                     ticketNum  = new AtomicInteger();
            private static final ThreadLocal<Integer> LOCAL      = new ThreadLocal<Integer>();

            public void lock() {
                int myticket = ticketNum.getAndIncrement();
                LOCAL.set(myticket);
                while (myticket != serviceNum.get()) {
                }

            }

            public void unlock() {
                int myticket = LOCAL.get();
                serviceNum.compareAndSet(myticket, myticket + 1);
            }
        }
        每次都要查询一个serviceNum 服务号，影响性能（必须要到主内存读取，并阻止其他cpu修改）。

        CLHLock 和MCSLock 则是两种类型相似的公平锁，采用链表的形式进行排序。
        CLHLock:
            当一个线程需要获取锁时，会创建一个新的QNode，将其中的locked设置为true表示需要获取锁，然后线程对tail域调用getAndSet方法，使自己成为队列的尾部，
            同时获取一个指向其前趋的引用myPred,然后该线程就在前趋结点的locked字段上旋转，直到前趋结点释放锁。当一个线程需要释放锁时，
            将当前结点的locked域设置为false，同时回收前趋结点。

            特点:隐式队列,所有节点在前驱节点自旋,空间复杂度低,在NUMA系统结构下性能很差(每个线程有自己内存,可能在很远位置的前驱上自旋)

            ex1:
            public class CLHLock implements Lock {
                AtomicReference<QNode> tail = new AtomicReference<QNode>(new QNode());
                ThreadLocal<QNode> myPred;
                ThreadLocal<QNode> myNode;

                public CLHLock() {
                    tail = new AtomicReference<QNode>(new QNode());
                    myNode = new ThreadLocal<QNode>() {
                        protected QNode initialValue() {
                            return new QNode();
                        }
                    };
                    myPred = new ThreadLocal<QNode>() {
                        protected QNode initialValue() {
                            return null;
                        }
                    };
                }

                @Override
                public void lock() {
                    QNode qnode = myNode.get();
                    qnode.locked = true;
                    QNode pred = tail.getAndSet(qnode);
                    myPred.set(pred);
                    while (pred.locked) {
                    }
                }

                @Override
                public void unlock() {
                    QNode qnode = myNode.get();
                    qnode.locked = false;
                    myNode.set(myPred.get());
                }
            }

        MCSLock:
            public class MCSLock {
                public static class MCSNode {
                    volatile MCSNode next;
                    volatile boolean isLocked = true;
                }

                private static final ThreadLocal<MCSNode> NODE = new ThreadLocal<MCSNode>();
                @SuppressWarnings("unused")
                private volatile MCSNode queue;
                private static final AtomicReferenceFieldUpdater<MCSLock, MCSNode> UPDATER = AtomicReferenceFieldUpdater.newUpdater(MCSLock.class,
                                                                                               MCSNode.class, "queue");

                public void lock() {
                    MCSNode currentNode = new MCSNode();
                    NODE.set(currentNode);
                    MCSNode preNode = UPDATER.getAndSet(this, currentNode);
                    if (preNode != null) {
                        preNode.next = currentNode;
                        while (currentNode.isLocked) {

                        }
                    }
                }

                public void unlock() {
                    MCSNode currentNode = NODE.get();
                    if (currentNode.next == null) {
                        if (UPDATER.compareAndSet(this, currentNode, null)) {

                        } else {
                            while (currentNode.next == null) {
                            }
                        }
                    } else {
                        currentNode.next.isLocked = false;
                        currentNode.next = null;
                    }
                }
            }

            每次申请锁将自身设置为尾节点,若有前驱节点,则默认状态为自旋,等待前驱节点完成任务后释放,
            释放锁时查看当前节点next域是否为空,不为空则意味着有后继节点但还未连接上,需要自旋等待(while (currentNode.next == null))。
            每次释放锁都是释放后继结点的lock域。
            特点:显式队列,所有节点在本地内存上自旋。


● Java中实现多态的机制是什么；

● 如何将一个Java对象序列化到文件里；

    使用ObjectOutputStream来写,使用不同的输出流构造该对象就写入到不同的流中(文件流就是FileOutputStream),
    使用writeObject方法写。
    使用ObjectInputStream来写,使用不同的输入流构造该对象就从不同的流中读入(文件流就是FileInputStream),
    使用readObject方法读,需要强制转型。

    ex写:
    User user = new User();
    user.setId(1);
    user.setName("Mr XP.Wang");
    try {
        ObjectOutputStream os = new ObjectOutputStream(
                new FileOutputStream("./out.txt"));
        os.writeObject(user);// 将User对象写进文件
        os.close();
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }

    ex读:
    try {
        ObjectInputStream is = new ObjectInputStream(new FileInputStream(
                "./out.txt"));
        User temp = (User) is.readObject();// 从流中读取User的数据
        System.out.println(temp.getId());
        System.out.println(temp.getName());
        List tempList = (List) is.readObject();// 从流中读取List的数据
        for (Iterator iterator = tempList.iterator(); iterator.hasNext();) {
            System.out.print(iterator.next());
        }
        is.close();
    } catch (FileNotFoundException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    } catch (ClassNotFoundException e) {
        e.printStackTrace();
    }

    *static成员不能序列化
    *如果需要指定哪些字段序列化,可以使数据类实现Externalizable接口,可以通过writeObject()制定序列化哪些字段,
     或者使用transient关键字修饰需要跳过的字段。
    *使用Externalizable接口,使用writeExternal和readExternal来读写对象,并且实现Externalizable接口的对象会调用对象的默认构造方法

● 说说你对Java反射的理解； 答：Java 中的反射首先是能够获取到Java 中要反射类的字节码， 获取字节码有三种方法，

● 同步的方法；多进程开发以及多进程应用场景；

● 在Java中wait和seelp方法的不同；答：最大的不同是在等待时wait 会释放锁，而sleep 一直持有锁。wait 通常被用于线程间交互，sleep 通常被用于暂停执行。

● synchronized 和volatile 关键字的作用；答：1）保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。2）禁止进行指令重排序。

● volatile 本质是在告诉jvm 当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取；synchronized 则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。

    1.volatile 仅能使用在变量级别；synchronized 则可以使用在变量、方法、和类级别的

    2.volatile 仅能实现变量的修改可见性，并不能保证原子性；synchronized 则可以保证变量的修改可见性和原子性

    3.volatile 不会造成线程的阻塞；synchronized 可能会造成线程的阻塞。

    4.volatile 标记的变量不会被编译器优化；synchronized 标记的变量可以被编译器优化

● 服务器只提供数据接收接口，在多线程或多进程条件下，如何保证数据的有序到达；

● ThreadLocal原理，实现及如何保证Local属性；

● String StringBuilder StringBuffer对比；

● 你所知道的设计模式有哪些；
    答：Java 中一般认为有23 种设计模式，我们不需要所有的都会，但是其中常用的几种设计模式应该去掌握。下面列出了所有的设计模式。需要掌握的设计模式我单独列出来了，当然能掌握的越多越好。

    总体来说设计模式分为三大类：

    创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。

    结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。

    行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。

● Java如何调用c、c++语言；

● 接口与回调；回调的原理；写一个回调demo；

● 泛型原理，举例说明；解析与分派；

● 抽象类与接口的区别；应用场景；抽象类是否可以没有方法和属性；

● 静态属性和静态方法是否可以被继承？是否可以被重写？以及原因？

● 修改对象A的equals方法的签名，那么使用HashMap存放这个对象实例的时候，会调用哪个equals方法；

● 说说你对泛型的了解；

● Java的异常体系；

● 如何控制某个方法允许并发访问线程的个数；

● 动态代理的区别，什么场景使用；

最新部分

● 简述synchronized?Object；Monitor机制；

● 简述happen-before规则 ；

● JUC和Object ； Monitor机制区别是什么 ； 简述AQS原理 ；

● 简述DCL失效原因，解决方法 ；

● 简述nio原理 ；

● jvm运行时数据区域有哪几部分组成，各自作用 ；

● gc算法有哪些 ； gc收集器有哪些 ；

● 简述class加载各阶段过程 ； class ； loader有哪些模型 ；

● 简述常用的JDK命令行工具 ；

● 简述字节码文件组成 ；

● 讲讲你平常是如何针对具体的SQL做优化 ；

● mysql的存储引擎有哪些，区别 ；

● gc:内存模型；

● gc: 垃圾回收 ；

● 多线程：如何实现一个定时调度和循环调度的工具类。但提交任务处理不过来的时候，拒绝机制应该如何处理 ； 线程池默认有哪几种拒绝机制 ；

● 多线程： 如何实现一个ThreadLocal ；

● 说说你了解的一个线程安全队列 ；

● Atomic包的实现原理是什么 ；

● CAS又是怎么保证原子性的 ；

● string分析1000次循环subString用了多少内存 ；

数据结构与算法

● 堆和栈在内存中的区别是什么(数据结构方面以及实际实现方面)；

● 最快的排序算法是哪个？给阿里2万多名员工按年龄排序应该选择哪个算法？堆和树的区别；写出快排代码；链表逆序代码；

● 求1000以内的水仙花数以及40亿以内的水仙花数；

● 子串包含问题(KMP 算法)写代码实现；

● 万亿级别的两个URL文件A和B，如何求出A和B的差集C,(Bit映射->hash分组->多文件读写效率->磁盘寻址以及应用层面对寻址的优化)

● 蚁群算法与蒙特卡洛算法；

● 写出你所知道的排序算法及时空复杂度，稳定性；

● 百度POI中如何试下查找最近的商家功能(坐标镜像+R树)。

其他

● 死锁的四个必要条件；

● 常见编码方式；utf-8编码中的中文占几个字节；int型几个字节；

● 实现一个Json解析器(可以通过正则提高速度)；

● MVC MVP MVVM; 常见的设计模式；写出观察者模式的代码；

● TCP的3次握手和四次挥手；TCP与UDP的区别；

● HTTP协议；HTTP1.0与2.0的区别；HTTP报文结构；

● HTTP与HTTPS的区别以及如何实现安全性；

● 都使用过哪些框架、平台；

● 都使用过哪些自定义控件；

● 介绍你做过的哪些项目；